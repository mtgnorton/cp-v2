// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AdministratorRoleDao is the data access object for table ga_administrator_role.
type AdministratorRoleDao struct {
	Table   string                   // Table is the underlying table name of the DAO.
	Group   string                   // Group is the database configuration group name of current DAO.
	Columns AdministratorRoleColumns // Columns contains all the column names of Table for convenient usage.
}

// AdministratorRoleColumns defines and stores column names for table ga_administrator_role.
type AdministratorRoleColumns struct {
	Id              string //
	AdministratorId string // 管理员id
	RoleId          string // 角色id
	CreatedAt       string // 创建时间
	UpdatedAt       string // 更新时间
}

//  administratorRoleColumns holds the columns for table ga_administrator_role.
var administratorRoleColumns = AdministratorRoleColumns{
	Id:              "id",
	AdministratorId: "administrator_id",
	RoleId:          "role_id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// NewAdministratorRoleDao creates and returns a new DAO object for table data access.
func NewAdministratorRoleDao() *AdministratorRoleDao {
	return &AdministratorRoleDao{
		Group:   "default",
		Table:   "ga_administrator_role",
		Columns: administratorRoleColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AdministratorRoleDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AdministratorRoleDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AdministratorRoleDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
