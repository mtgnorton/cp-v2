// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// NodesDao is the data access object for table forum_nodes.
type NodesDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns NodesColumns // columns contains all the column names of Table for convenient usage.
}

// NodesColumns defines and stores column names for table forum_nodes.
type NodesColumns struct {
	Id             string //
	Name           string // 节点名称
	Keyword        string // 节点关键词
	Description    string // 节点描述
	Detail         string // 节点详情
	Img            string // 节点图片
	ParentId       string // 父节点id
	IsIndex        string // 是否首页显示
	IsDisabledEdit string // 是否禁用编辑和删除,1是 0否
	Sort           string // 显示顺序越小越靠前
	CreatedAt      string // 创建时间
	DeletedAt      string // 删除时间
	IsVirtual      string //
	CategoryId     string //
}

//  NodesColumns holds the columns for table forum_nodes.
var nodesColumns = NodesColumns{
	Id:             "id",
	Name:           "name",
	Keyword:        "keyword",
	Description:    "description",
	Detail:         "detail",
	Img:            "img",
	ParentId:       "parent_id",
	IsIndex:        "is_index",
	IsDisabledEdit: "is_disabled_edit",
	Sort:           "sort",
	CreatedAt:      "created_at",
	DeletedAt:      "deleted_at",
	IsVirtual:      "is_virtual",
	CategoryId:     "category_id",
}

// NewNodesDao creates and returns a new DAO object for table data access.
func NewNodesDao() *NodesDao {
	return &NodesDao{
		group:   "default",
		table:   "forum_nodes",
		columns: nodesColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *NodesDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *NodesDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *NodesDao) Columns() NodesColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *NodesDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *NodesDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *NodesDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
