// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AdministratorDao is the data access object for table ga_administrator.
type AdministratorDao struct {
	Table   string               // Table is the underlying table name of the DAO.
	Group   string               // Group is the database configuration group name of current DAO.
	Columns AdministratorColumns // Columns contains all the column names of Table for convenient usage.
}

// AdministratorColumns defines and stores column names for table ga_administrator.
type AdministratorColumns struct {
	Id            string //
	Username      string // 用户名
	Password      string // MD5密码
	Nickname      string // 昵称
	Avatar        string // 头像地址
	Status        string // 状态 normal 正常 disabled 禁用
	Remark        string // 备注
	LastLoginIp   string // 最后登陆IP
	LastLoginDate string // 最后登陆时间
	CreatedAt     string // 注册时间
	UpdatedAt     string // 更新时间
}

//  administratorColumns holds the columns for table ga_administrator.
var administratorColumns = AdministratorColumns{
	Id:            "id",
	Username:      "username",
	Password:      "password",
	Nickname:      "nickname",
	Avatar:        "avatar",
	Status:        "status",
	Remark:        "remark",
	LastLoginIp:   "last_login_ip",
	LastLoginDate: "last_login_date",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// NewAdministratorDao creates and returns a new DAO object for table data access.
func NewAdministratorDao() *AdministratorDao {
	return &AdministratorDao{
		Group:   "default",
		Table:   "ga_administrator",
		Columns: administratorColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AdministratorDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AdministratorDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AdministratorDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
