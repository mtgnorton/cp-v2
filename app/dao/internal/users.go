// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UsersDao is the data access object for table forum_users.
type UsersDao struct {
	table   string       // table is the underlying table name of the DAO.
	group   string       // group is the database configuration group name of current DAO.
	columns UsersColumns // columns contains all the column names of Table for convenient usage.
}

// UsersColumns defines and stores column names for table forum_users.
type UsersColumns struct {
	Id                  string //
	Username            string // 用户名
	Email               string // email
	Description         string // 简介
	Password            string // MD5密码
	Avatar              string // 头像地址
	Status              string // 二进制位,0111 由低到高分别代表 禁止登录，禁止发帖，禁止回复，尚未激活
	PostsAmount         string // 创建主题次数
	ReplyAmount         string // 回复次数
	ShieldedAmount      string // 被屏蔽次数
	FollowByOtherAmount string // 被关注次数
	TodayActivity       string // 今日活跃度
	Balance             string // 余额
	Site                string // 个人站点
	Company             string // 所在公司
	Job                 string // 工作职位
	Location            string // 所在地
	Signature           string // 个人签名
	Introduction        string // 个人简介
	Remark              string // 备注
	LastLoginIp         string // 最后登陆IP
	LastLoginTime       string // 最后登陆时间
	CreatedAt           string // 注册时间
	UpdatedAt           string // 更新时间
	DeletedAt           string // 删除时间
}

//  UsersColumns holds the columns for table forum_users.
var usersColumns = UsersColumns{
	Id:                  "id",
	Username:            "username",
	Email:               "email",
	Description:         "description",
	Password:            "password",
	Avatar:              "avatar",
	Status:              "status",
	PostsAmount:         "posts_amount",
	ReplyAmount:         "reply_amount",
	ShieldedAmount:      "shielded_amount",
	FollowByOtherAmount: "follow_by_other_amount",
	TodayActivity:       "today_activity",
	Balance:             "balance",
	Site:                "site",
	Company:             "company",
	Job:                 "job",
	Location:            "location",
	Signature:           "signature",
	Introduction:        "introduction",
	Remark:              "remark",
	LastLoginIp:         "last_login_ip",
	LastLoginTime:       "last_login_time",
	CreatedAt:           "created_at",
	UpdatedAt:           "updated_at",
	DeletedAt:           "deleted_at",
}

// NewUsersDao creates and returns a new DAO object for table data access.
func NewUsersDao() *UsersDao {
	return &UsersDao{
		group:   "default",
		table:   "forum_users",
		columns: usersColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UsersDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UsersDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UsersDao) Columns() UsersColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UsersDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UsersDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UsersDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
