// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AdminLogDao is the data access object for table ga_admin_log.
type AdminLogDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns AdminLogColumns // Columns contains all the column names of Table for convenient usage.
}

// AdminLogColumns defines and stores column names for table ga_admin_log.
type AdminLogColumns struct {
	Id              string //
	AdministratorId string // 管理员id
	Path            string // 请求路径
	Method          string // 请求方法
	PathName        string // 请求路径名称
	Params          string // 请求参数
	Response        string // 响应结果
	CreatedAt       string // 创建时间
	UpdatedAt       string // 更新时间
}

//  adminLogColumns holds the columns for table ga_admin_log.
var adminLogColumns = AdminLogColumns{
	Id:              "id",
	AdministratorId: "administrator_id",
	Path:            "path",
	Method:          "method",
	PathName:        "path_name",
	Params:          "params",
	Response:        "response",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
}

// NewAdminLogDao creates and returns a new DAO object for table data access.
func NewAdminLogDao() *AdminLogDao {
	return &AdminLogDao{
		Group:   "default",
		Table:   "ga_admin_log",
		Columns: adminLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AdminLogDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AdminLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AdminLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
